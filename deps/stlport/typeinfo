/*
 * Copyright (c) 1999 
 * Boris Fomitchev
 *
 * This material is provided "as is", with absolutely no warranty expressed
 * or implied. Any use is at your own risk.
 *
 * Permission to use or copy this software for any purpose is hereby granted 
 * without fee, provided the above notices are retained on all copies.
 * Permission to modify the code and to distribute modified code is granted,
 * provided the above notices are retained, and a notice that the code was
 * modified is included with the above copyright notice.
 *
 */

#ifndef _STLP_TYPEINFO
# define _STLP_TYPEINFO

# ifndef _STLP_OUTERMOST_HEADER_ID
#  define _STLP_OUTERMOST_HEADER_ID 0x473
#  include <stl/_prolog.h>
# endif

# ifndef _STLP_NO_TYPEINFO

# if defined (_STLP_NO_NEW_NEW_HEADER)
#  include <typeinfo.h>
# else
#  include _STLP_NATIVE_CPP_RUNTIME_HEADER(typeinfo)
# endif

// if <typeinfo.h> already included, do not import anything
# if defined  (_STLP_USE_NAMESPACES) && ! defined (_STLP_OLDSTD_typeinfo) \
&& ( defined (_STLP_VENDOR_GLOBAL_EXCEPT_STD) || defined (_STLP_USE_OWN_NAMESPACE))

# if defined(_STLP_MSVC) && (_STLP_MSVC < 1300)
class _STLP_CLASS_DECLSPEC bad_cast : public exception {
public :
bad_cast() : exception("bad_cast") { }
};
#endif

_STLP_BEGIN_NAMESPACE

// VC++ 6 has only this guy in ::
// # if !(defined(_STLP_MSVC)&& (_STLP_MSVC <= 1200))
using _STLP_VENDOR_EXCEPT_STD::type_info;
// # endif

#  if !(defined(__MRC__) || defined(__SC__))
using _STLP_VENDOR_EXCEPT_STD::bad_typeid;
#  endif

//#if defined( __xlC__ ) && (__xlC__ < 0x500)
//# include <exception>
//struct bad_cast : exception {};
//#endif
# if defined(_STLP_MSVC) && (_STLP_MSVC < 1300)
using ::bad_cast;
# else
using _STLP_VENDOR_EXCEPT_STD::bad_cast;
# endif

_STLP_END_NAMESPACE
#endif /* _STLP_OWN_NAMESPACE */

#else

# include <exception>
_STLP_BEGIN_NAMESPACE
struct bad_cast : exception {};
_STLP_END_NAMESPACE
#endif  /* NO_TYPEINFO */

# if (_STLP_OUTERMOST_HEADER_ID == 0x473)
#  include <stl/_epilog.h>
#  undef _STLP_OUTERMOST_HEADER_ID
# endif

#endif /* _STLP_TYPEINFO */

// Local Variables:
// mode:C++
// End:
