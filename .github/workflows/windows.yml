name: windows

on:
  pull_request:
  push:

jobs:
  build_thyme_windows_msvc:
    runs-on: windows-2019
    strategy:
      matrix:
        platform: [x86, amd64]
          
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'   
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
        
    - uses: ilammy/msvc-dev-cmd@v1.10.0
      with:
        arch: ${{ matrix.platform }}
        
    - name: Set variables
      id: vars
      run: |
        If ("${{ matrix.platform }}" -eq "x86") {
          echo "::set-output name=build::x86"
          echo "::set-output name=build_type::Win32"
          echo "::set-output name=arc_path::i686"
          echo "::set-output name=wxrc_path::vc_mswu"
        } else {
          echo "::set-output name=build::x64"
          echo "::set-output name=build_type::x64"
          echo "::set-output name=arc_path::x86_64"
          echo "::set-output name=wxrc_path::vc_mswu_x64"
        }
        echo "::set-output name=wx_ver::wxWidgets-3.0.5"
        
    - name: Install dependencies
      run: |
        Invoke-WebRequest -Uri https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-win.zip -OutFile $Env:TEMP\ninja-win.zip
        Expand-Archive $Env:TEMP\ninja-win.zip -DestinationPath $Env:TEMP\ninja
        echo "$Env:TEMP\ninja" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        ninja --version
        git clone --branch v3.0.5 --depth 1 https://github.com/wxWidgets/wxWidgets.git D:\${{ steps.vars.outputs.wx_ver }}
        Copy-Item D:\${{ steps.vars.outputs.wx_ver }}\include\wx\msw\setup0.h -Destination D:\${{ steps.vars.outputs.wx_ver }}\include\wx\msw\setup.h
        Copy-Item D:\${{ steps.vars.outputs.wx_ver }}\include\wx\msw\setup0.h -Destination D:\${{ steps.vars.outputs.wx_ver }}\include\wx\setup.h
        cd D:\${{ steps.vars.outputs.wx_ver }}\build\msw
        nmake /f makefile.vc TARGET_CPU=${{ matrix.platform }} BUILD=release
        cd D:\${{ steps.vars.outputs.wx_ver }}\utils\wxrc
        Copy-Item D:\${{ steps.vars.outputs.wx_ver }}\include\wx\msw\setup0.h -Destination D:\${{ steps.vars.outputs.wx_ver }}\include\wx\setup.h
        nmake /f makefile.vc TARGET_CPU=${{ matrix.platform }} BUILD=release
        
    - name: Build Thyme
      run: |
        cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TOOLS=ON -DSTANDALONE=ON -DUSE_CRASHPAD=ON -DwxWidgets_wxrc_EXECUTABLE=D:\${{ steps.vars.outputs.wx_ver }}\utils\wxrc\${{ steps.vars.outputs.wxrc_path }}\wxrc.exe -DwxWidgets_ROOT_DIR=D:\${{ steps.vars.outputs.wx_ver }} -DwxWidgets_LIB_DIR=D:\${{ steps.vars.outputs.wx_ver }}\libs\vc_x64_lib -DwxWidgets_CONFIGURATION=mswu -B build
        cmake --build build --config RelWithDebInfo

    - name: Test Thyme
      run: |
        cd build
        ctest . --output-on-failure
        
    - name: Create archives
      shell: bash
      id: mkarc
      run: |
        mkdir artifact
        7z a artifact/thyme_${{ steps.vars.outputs.arc_path }}.zip ./build/thyme.exe ./build/thyme.pdb ./build/DebugWindow.dll ./build/DebugWindow.pdb ./build/thymecrashhandler.exe ./build/thymecrashhandler.pdb
        if [ ${{ matrix.platform }} = "x86" ]; then 7z u artifact/thyme_${{ steps.vars.outputs.arc_path }}.zip ./build/thyme.dll ./build/thymedll.pdb ./build/thymelauncher.exe ./build/thymelauncher.pdb ;fi
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: thyme
        path: artifact
        
    - name: Upload development release
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/develop' }}
      uses: softprops/action-gh-release@v1
      with:
        name: Development Build
        tag_name: "latest"
        prerelease: true
        files: |
          artifact\*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload tagged release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifact\*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
